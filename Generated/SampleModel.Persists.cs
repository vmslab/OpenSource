//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a mozart.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Mozart.Common;
using Mozart.Collections;
using Mozart.Extensions;
using Mozart.Mapping;
using Mozart.Data;
using Mozart.Data.Entity;
using Mozart.Task.Execution;
using Mozart.Task.Execution.Persists;
using Sample.APS.Inputs;
using Sample.APS.Outputs;

namespace Sample.APS.Persists
{
    
    /// <summary>
    /// SampleModel Persist Model class
    /// </summary>
    public partial class SampleModel_Persist : PersistModule
    {
        public override string Name
        {
            get
            {
                return "SampleModel";
            }
        }
        protected override void Configure()
        {
            InputPersister input = new InputPersister();
            ServiceLocator.RegisterInstance<IInputPersister> (input);
            OutputPersister output = new OutputPersister();
            ServiceLocator.RegisterInstance<IOutputPersister> (output);
        }
        /// <summary>
        /// persist context class
        /// </summary>
        internal partial class InputPersister : InputPersisterBase
        {
            private Sample.APS.Logic.PersistInputs fPersistInputs = new Sample.APS.Logic.PersistInputs();
            protected override void Configure()
            {
                #region Init Config
                // Init
                this.SetParametersInfo(typeof(GlobalParameters), typeof(ConfigParameters), null, null, null, null);
                #endregion
                #region Set Property
                ThreadCount = 1;
                RetryCount = 3;
                ExceptionPolicy = PersistExceptionPolicy.LogOnly;
                #endregion
                #region Inputs Config
                // Inputs
                this.Log("Input loading");
                this.StartPerformance();
                #region * Preloading * Config
                // * Preloading *
                this.StartPreloading();
                this.StartPerformance();
                this.EndPerformance();
                this.EndPreloading();
                // * Preloading * End
                #endregion
                #region EXECUTION Persists Config
                // EXECUTION Persists
                this.StartPerformance();
                this.Load<Config>("Config", false, true, null);
                this.Action("Config", null);
                this.Load<ExcutionOpertion>("ExcutionOpertion", false, true, null);
                this.Action("ExcutionOpertion", null);
                this.Load<PresetInfo>("PresetInfo", false, true, fPersistInputs.OnAfterLoad_PresetInfo);
                this.Action("PresetInfo", null);
                this.EndPerformance();
                // EXECUTION Persists End
                #endregion
                #region BOP Persists Config
                // BOP Persists
                this.StartPerformance();
                this.Load<ProcStep>("ProcStep", false, true, null);
                this.Action("ProcStep", null);
                this.Load<Process>("Process", false, true, fPersistInputs.OnAfterLoad_Process);
                this.Action("Process", null);
                this.Load<Product>("Product", false, true, fPersistInputs.OnAfterLoad_Product);
                this.Action("Product", null);
                this.Load<StdStep>("StdStep", false, true, null);
                this.Action("StdStep", null);
                this.Load<ProductRoute>("ProductRoute", false, true, null);
                this.Action("ProductRoute", null);
                this.Load<StepTAT>("StepTAT", false, true, null);
                this.Action("StepTAT", null);
                this.Load<StepYield>("StepYield", false, true, null);
                this.Action("StepYield", null);
                this.EndPerformance();
                // BOP Persists End
                #endregion
                #region RESOURCE Persists Config
                // RESOURCE Persists
                this.StartPerformance();
                this.Load<Equipment>("Equipment", false, true, fPersistInputs.OnAfterLoad_Equipment);
                this.Action("Equipment", null);
                this.Load<EqpArrange>("EqpArrange", false, true, fPersistInputs.OnAfterLoad_EqpArrange);
                this.Action("EqpArrange", null);
                this.Load<LineInfo>("LineInfo", false, true, null);
                this.Action("LineInfo", null);
                this.EndPerformance();
                // RESOURCE Persists End
                #endregion
                #region WIP Persists Config
                // WIP Persists
                this.StartPerformance();
                this.Load<Wip>("Wip", false, true, fPersistInputs.OnAfterLoad_Wip);
                this.Action("Wip", null);
                this.EndPerformance();
                // WIP Persists End
                #endregion
                #region TARGET Persists Config
                // TARGET Persists
                this.StartPerformance();
                this.Load<Demand>("Demand", false, true, null);
                this.Action("Demand", null);
                this.EndPerformance();
                // TARGET Persists End
                #endregion
                this.EndPerformance();
                // Inputs End
                #endregion
            }
        }
        /// <summary>
        /// persist context class
        /// </summary>
        internal partial class OutputPersister : OutputPersisterBase
        {
            protected override void Configure()
            {
                #region Set Property
                ThreadCount = 1;
                RetryCount = 3;
                ExceptionPolicy = PersistExceptionPolicy.StopAtThrown;
                #endregion
                #region Outputs Config
                // Outputs
                this.Log("Output saving");
                this.StartPerformance();
                #region PegResult Persists Config
                // PegResult Persists
                this.StartPerformance();
                this.Commit<PegHistory>("PegHistory", true, true);
                this.Commit<InputPlan>("InputPlan", true, true);
                this.Commit<StepTarget>("StepTarget", true, true);
                this.Commit<UnpegHistory>("UnpegHistory", true, true);
                this.EndPerformance();
                // PegResult Persists End
                #endregion
                #region SimResult Persists Config
                // SimResult Persists
                this.StartPerformance();
                this.Commit<EqpPlan>("EqpPlan", true, true);
                this.Commit<LoadStat>("LoadStat", true, true);
                this.Commit<LoadHistory>("LoadHistory", true, true);
                this.Commit<ReleaseHistory>("ReleaseHistory", true, true);
                this.Commit<DispatchLog>("DispatchLog", true, true);
                this.EndPerformance();
                // SimResult Persists End
                #endregion
                #region Log Persists Config
                // Log Persists
                this.StartPerformance();
                this.Commit<ErrorHistory>("ErrorHistory", true, true);
                this.EndPerformance();
                // Log Persists End
                #endregion
                this.EndPerformance();
                // Outputs End
                #endregion
            }
        }
    }
}
